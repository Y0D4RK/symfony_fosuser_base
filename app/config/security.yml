security:
    encoders:
        # defini le protocole de cryptage des mot de passes - indispensable
        FOS\UserBundle\Model\UserInterface: bcrypt

    # cette clÃ© dÃ©fini les role au sein de notre application - gere les autorisation (ROLE_ADMIN => propre Ã  FosUser)
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        # sf3 fos:user:demote  user1@mail.com ROLE_ADMIN
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # Fourni les utilisateurs - c'est lui qui part d'un login et d'un mdp pour recup un user et ses droits
    providers:
        #in_memory:
            #memory: =>  lorsque les users sont dÃ©fini directement dans le fichier security.yml
        fos_userbundle:
            id: fos_user.user_provider.username_email

    # parefeu - gere le filtrage du user, donc son authentification
    firewalls:

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            anonymous: ~

        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            provider: fos_userbundle
            form_login:
                check_path:               /login_check
                username_parameter:       email
                password_parameter:       password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        main: # identique au nom defini dans config.yml
            # pattern : url qui declenche la mise en oeuvre du parefeu '^/' -> tous ce qui commence par un / mobilise le parefeu
            pattern: ^/
            provider: fos_userbundle
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator


    # liste d'url, qui vont repondre Ã  des conditions d'accÃ¨s en fonction du role du user - connectÃ© ou non connectÃ©
    access_control:
        # chemin (regex) - toutes les URL qui commence par '/' et termine par login - necessite le role ...
        # par defaut tout les user son anonyme sur symfony
        # IS_AUTHENTICATED_ANONYMOUSLY
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # ROLE_USER
        - { path: ^/api/test, roles: ROLE_USER }


